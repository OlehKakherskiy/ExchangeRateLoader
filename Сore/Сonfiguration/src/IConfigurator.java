/**
 * У шаблоні проектування "Міст" даний клас відіграє базовий інтерфейс реалізації функцій системи конфігурування.
 * Він агрегується {@link AbstractConfigurator} та реалізує запити на завантаження та збереження конфігурацій 
 * згідно з реалізацією шаблону "Міст". Також клас об'явлений з модифікатором доступу за умовчуванням з метою
 * інкапсуляції складної логіки конфігураційної системи від зовнішнього середовища згідно шаблону проектування
 * "Фасад", у якому клас виконуэ роль элемента підсистеми.
 * <p>
 * Клас об'явлений як абстрактний з метою заборони створювати об'єкти від нього, хоча він не містить абстрактних методів,
 * які, у свою чергу, реалізують досить базові реалізації для ієрархії реалізацій підсистеми конфігурування.
 * </p>
 * 
 * @see AbstractConfigurator
 * 
 * @author Олег Кахерський, студент групи ІО-21, ФІОТ, НТУУ "КПІ"
 * @version 1.0
 */
abstract class IConfigurator {
    
    /**
     * В строку зберігається повідомлення про помилку при завантаженні/запису конфігураційних даних підсистемою.
     */
    protected String errorMessage;
    
    /**
     * Конструктор класу без параметрів. Викликає конструктор суперкласу.
     */
    protected IConfigurator(){
	super();
    }
    /**
     * Метод створений для конфігурування програмного додатку. Має бути перевизначенним з метою розширення
     * функціональності для завантаження конфігураційних даних з різних джерел даних: зовнішніх файлів з 
     * різними розширеннями, баз даних, і т.д.
     * <p>
     * Метод присваює значення <code>null</code> полю {@link #errorMessage}.
     * <p>
     * 
     * @return <code>true</code>. В підкласах має повертати <code>true</code>, якщо операція завантаження 
     * конфігураційних даних виконана успішно.
     */
    protected boolean load(){
	errorMessage = null;
	return true;
    }
    /**
     * Метод створений для збереження конфігураційних даних програмного додатку. Має бути перевизначенним 
     * з метою розширення функціональності для збереження даних у різні джерела даних: зовнішні файліи з 
     * різними розширеннями, бази даних, і т.д.
     * <p>
     * Метод присваює значення <code>null</code> полю {@link #errorMessage}.
     * <p>
     * 
     * @return <code>true</code>. В підкласах має повертати <code>true</code>, якщо операція збереження 
     * конфігураційних даних виконана успішно.
     */
    protected boolean save(){
	errorMessage = null;
	return true;
    }
    
    protected String getErrorMessage(){
	return errorMessage;
    }
}
